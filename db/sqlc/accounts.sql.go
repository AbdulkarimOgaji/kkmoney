// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: accounts.sql

package db

import (
	"context"
	"fmt"
)
type CreateAccountArgs struct {
	Holder string `json:"holder" binding:"required"`
	Currency string `json:"currency" binding:"required"`
}
const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (holder, balance, currency)
VALUES (?, ?, ?);
`

func getLastInserted(tableName string, id int64) string {
	return fmt.Sprintf("SELECT * FROM %v WHERE id = %v;", tableName, id)
}

func (q *Queries) CreateAccount(ctx context.Context, args CreateAccountArgs) (Account, error) {
    r, err := q.db.ExecContext(ctx, createAccount, args.Holder, 0, args.Currency)
	var i Account
	if err != nil {
		return i, err
	}
	lastInsertedId, err := r.LastInsertId()
	if err != nil {
		return i, err
	}
	row := q.db.QueryRowContext(ctx, getLastInserted("accounts", lastInsertedId))
	err = row.Scan(
		&i.ID,
		&i.Holder,
		&i.Balance,
		&i.CreatedAt,
		&i.Currency,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, holder, balance, created_at, currency FROM accounts
WHERE id = ?
LIMIT 1
`
const getAccountForUpdate = `SELECT id, holder, balance, created_at, currency FROM accounts
WHERE id = ?
FOR UPDATE`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Holder,
		&i.Balance,
		&i.CreatedAt,
		&i.Currency,
	)
	return i, err
}
func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Holder,
		&i.Balance,
		&i.CreatedAt,
		&i.Currency,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, holder, balance, created_at, currency FROM accounts LIMIT ?, ?
`

type GetAccountsArgs struct {
	Limit int 
	Offset int 
}

func (q *Queries) GetAccounts(ctx context.Context, args GetAccountsArgs) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts, args.Limit, args.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Holder,
			&i.Balance,
			&i.CreatedAt,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: updateAccount :one
UPDATE accounts SET balance = ?, currency = ? WHERE id = ?
`

type UpdateAccountArgs struct {
	Balance int64 `json:"balance" binding:"required"`
	Currency string `json:"currency" binding:"required"`
	Id int64 `json:"id" binding:"required"`
}

func (q *Queries) UpdateAccount(ctx context.Context, args UpdateAccountArgs) (Account, error) {
	_, err := q.db.ExecContext(ctx, updateAccount, args.Balance, args.Currency, args.Id)
	var i Account
	if err != nil {
		return i, err
	}
	
	row := q.db.QueryRowContext(ctx, getLastInserted("accounts", args.Id))
	err = row.Scan(
		&i.ID,
		&i.Holder,
		&i.Balance,
		&i.CreatedAt,
		&i.Currency,
	)
	return i, err

}
